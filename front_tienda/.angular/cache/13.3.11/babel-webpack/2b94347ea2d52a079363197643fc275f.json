{"ast":null,"code":"import { URL_SERVICES } from 'src/app/config/config';\nimport { map, catchError } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor( //se declara la variable http que hereda del http client\n    http, //se crea la variable route que hereda de Route.\n    router) {\n      this.http = http;\n      this.router = router; //se inicializa vacio y tipo string\n\n      this.token = ''; //Aqui se carga el usuario y el token\n      //se llama la funcion para verificar el token en local storage del navegador\n\n      this.localStorage();\n    } //verifica si existe un token en el local storage del navegador\n\n\n    localStorage() {\n      var _a;\n\n      if (localStorage.getItem('token')) {\n        this.token = localStorage.getItem('token'); //convertimos el string del local en json para facil lectura, si el user es null se da vacio\n\n        this.user = JSON.parse((_a = localStorage.getItem('user')) !== null && _a !== void 0 ? _a : '');\n      } //si no existe el token, retorna null\n      else {\n        this.token = '';\n        this.user = null;\n      }\n    }\n\n    login(email, password) {\n      //se declara la url del api y la funcion a consultar, login\n      let URL = URL_SERVICES + '/users/login_ecommerce'; //se declara el end point a la url del api por medio de post y se le agrega como cuerpo\n      //el email y el password\n\n      return this.http.post(URL, {\n        email,\n        password\n      }).pipe( //aqui se mapea la respuesta antes de enviar.\n      map(resp => {\n        //se verifica si la respuesta contiene el token\n        if (resp.access_token) {\n          //almacenar la informacion en localstorage y retorna true o false\n          return this.saveTokenstorage(resp);\n        } else {\n          return resp;\n        }\n      }), //aqui se gestiona el catch error\n      catchError(err => {\n        return of(err);\n      }));\n    } //esta funcion almacena el token en el localstorage\n\n\n    saveTokenstorage(resp) {\n      if (resp.access_token && resp.user) {\n        //almacenar el token en una linea\n        localStorage.setItem('token', resp.access_token); //almacenar los datos de usuario, pero parceando el json a string para poder almacenar\n\n        localStorage.setItem('user', JSON.stringify(resp.user)); //se almacenan los datos en las variables globales\n\n        this.user = resp.user;\n        this.token = resp.access_token; //retorna true al finalizar\n\n        return true;\n      }\n\n      return false;\n    }\n\n    register(data) {\n      //se declara la url del api y la funcion a consultar, registro\n      let URL = URL_SERVICES + '/users/register'; //se declara el end point a la url del api por medio de post y se le agrega como cuerpo\n      //el email y el password\n\n      return this.http.post(URL, data);\n    }\n\n    logout() {\n      this.user = null;\n      this.token = '';\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      this.router.navigate([\"auth/login\"]);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}